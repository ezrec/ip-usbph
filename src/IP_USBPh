/*
 * Copyright 2008, Jason McMullan <jason.mcmullan@gmail.com>
 *
 * Licensed under the LGPL v2
 */

/*
 * C++ bindings for libip-usbph
 */

#include <errno.h>

extern "C" {
#include <ip-usbph.h>
};

struct IP_USBPh_Error {
	int error;
	IP_USBPh_Error(int err) { error = err; }
};	/* General exception */

class IP_USBPh {
private:
	struct ip_usbph *ph;
public:
	IP_USBPh(int index = 0) {
		ph = ip_usbph_acquire(index);
		if (ph == NULL) {
			throw IP_USBPh_Error(ENOMEM);
		}
	}
	~IP_USBPh(void) {
		ip_usbph_release(ph);
	}
	int init(void)
		{ return ip_usbph_init(ph); }
	int backlight(void)
		{ return ip_usbph_backlight(ph); }
	int clear(void)
		{ return ip_usbph_clear(ph); }
	ip_usbph_digit font_digit(uint8_t c)
		{ return ip_usbph_font_digit(c); }
	ip_usbph_char  font_char(uint8_t c)
		{ return ip_usbph_font_char(c); }
	int symbol(ip_usbph_sym sym, int is_on)
		{ return ip_usbph_symbol(ph, sym, is_on); }
	int top_digit(int index, ip_usbph_digit digit)
		{ return ip_usbph_top_digit(ph, index, digit); }
	int top_char(int index, ip_usbph_char ch)
		{ return ip_usbph_top_char(ph, index, ch); }
	int bot_char(int index, ip_usbph_char ch)
		{ return ip_usbph_bot_char(ph, index, ch); }
	int flush(void)
		{ return ip_usbph_flush(ph); }
	int key_fd(void)
		{ return ip_usbph_key_fd(ph); }
	uint8_t key_get(void)
		{ return ip_usbph_key_get(ph); }
};
